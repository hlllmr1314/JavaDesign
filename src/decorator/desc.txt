一、概述
动态地给一个对象添加一些额外的职责。就增加功能来说，Decorator模式相比生成子类更为灵活。

二、适用性
1.在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。 
2.处理那些可以撤消的职责。 
3.当不能采用生成子类的方法进行扩充时。

三、参与者
1.Component 定义一个对象接口，可以给这些对象动态地添加职责。 
2.ConcreteComponent 定义一个对象，可以给这个对象添加一些职责。

3.Decorator 维持一个指向Component对象的指针，并定义一个与Component接口一致的接口。 
4.ConcreteDecorator 向组件添加职责。

优点：
 装饰类和被装饰类可以独立发展，而不会互相耦合。
 装饰模式是继承关系的替换方案。
 装饰模式可以动态地扩展一个实现类的功能，这不需要多说，装饰模式定义就是如此。
 
 缺点：
  多层的装饰模式是比较复杂的，尽量减少装饰类的数量，以便降低系统的复杂度。
  
场景：
  需要扩展一个类的功能，或给一个类增加附加功能。
  需要动态的给一个对象增加功能，这些功能呢个可以再动态的撤销
  需要为一批的兄弟类进行改装或假装功能，当然是首选装饰模式。