一、概述
将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。

二、适用性
1.当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时。 
2.当构造过程必须允许被构造的对象有不同的表示时。

三、参与者
1.Builder 为创建一个Product对象的各个部件指定抽象接口。
2.ConcreteBuilder 实现Builder的接口以构造和装配该产品的各个部件。 定义并明确它所创建的表示。 提供一个检索产品的接口。 
3.Director 构造一个使用Builder接口的对象。
4.Product 表示被构造的复杂对象。ConcreteBuilder创建该产品的内部表示并定义它的装配过程。 包含定义组成部件的类，包括将这些部件装配成最终产品的接口。

四、优点
封装性：使用建造者可以使客户端不必知道产品内部组成的细节。
独立，容易扩散：
便于控制细节风险：

场景：
 1，相同的方法，不同的执行顺序，产生不同的事件结果时，可以采用建造者模式。
 2，多个部件或零件，都可以装配到一个对象中，但是产生的运行结果不相同时，则可以使用该模式。
 3，产品类非常复杂，或者产品类中的调用顺序不同产生类不同的效能，这个时候使用建造者模式非常合适
 4，在对象创建过程中使用到系统中的一些其他对象，这些对象在产品对象的创建过程中不易得到时，
    可以采用建造者模式封装该对象的创建过程，这种场景只能是一个补偿方法，因为一个对象不容易获得，
    在设计阶段竟然没有发觉，而要通过创建者模式柔化创建过程，本身已经为方法设计的最初目标。
